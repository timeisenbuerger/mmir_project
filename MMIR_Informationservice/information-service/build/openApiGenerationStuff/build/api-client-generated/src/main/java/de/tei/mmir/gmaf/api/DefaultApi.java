/*
 * GMAF
 * GMAF REST
 *
 * The version of the OpenAPI document: 1.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tei.mmir.gmaf.api;

import de.tei.mmir.gmaf.invoker.ApiCallback;
import de.tei.mmir.gmaf.invoker.ApiClient;
import de.tei.mmir.gmaf.invoker.ApiException;
import de.tei.mmir.gmaf.invoker.ApiResponse;
import de.tei.mmir.gmaf.invoker.Configuration;
import de.tei.mmir.gmaf.invoker.Pair;
import de.tei.mmir.gmaf.invoker.ProgressRequestBody;
import de.tei.mmir.gmaf.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.tei.mmir.gmaf.model.GMAF;
import de.tei.mmir.gmaf.model.GeneralMetadata;
import de.tei.mmir.gmaf.model.MMFG;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAuthToken
     * @param apiKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getAuthTokenCall(String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gmaf/getToken/{api-key}"
                .replace("{" + "api-key" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthTokenValidateBeforeCall(String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getAuthToken(Async)");
        }

        return getAuthTokenCall(apiKey, _callback);

    }

    /**
     *
     *
     * @param apiKey  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public String getAuthToken(String apiKey) throws ApiException {
        ApiResponse<String> localVarResp = getAuthTokenWithHttpInfo(apiKey);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param apiKey  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<String> getAuthTokenWithHttpInfo(String apiKey) throws ApiException {
        okhttp3.Call localVarCall = getAuthTokenValidateBeforeCall(apiKey, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param apiKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getAuthTokenAsync(String apiKey, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthTokenValidateBeforeCall(apiKey, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthToken1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getAuthToken1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/getAuthToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthToken1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAuthToken1Call(_callback);

    }

    /**
     *
     *
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public String getAuthToken1() throws ApiException {
        ApiResponse<String> localVarResp = getAuthToken1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     *
     *
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<String> getAuthToken1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAuthToken1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getAuthToken1Async(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthToken1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollection
     * @param authToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getCollectionCall(String authToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gmaf/getCollection/{auth-token}"
                .replace("{" + "auth-token" + "}", localVarApiClient.escapeString(authToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionValidateBeforeCall(String authToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getCollection(Async)");
        }

        return getCollectionCall(authToken, _callback);

    }

    /**
     *
     *
     * @param authToken  (required)
     * @return List&lt;MMFG&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public List<MMFG> getCollection(String authToken) throws ApiException {
        ApiResponse<List<MMFG>> localVarResp = getCollectionWithHttpInfo(authToken);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param authToken  (required)
     * @return ApiResponse&lt;List&lt;MMFG&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<List<MMFG>> getCollectionWithHttpInfo(String authToken) throws ApiException {
        okhttp3.Call localVarCall = getCollectionValidateBeforeCall(authToken, null);
        Type localVarReturnType = new TypeToken<List<MMFG>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param authToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getCollectionAsync(String authToken, final ApiCallback<List<MMFG>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionValidateBeforeCall(authToken, _callback);
        Type localVarReturnType = new TypeToken<List<MMFG>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionIds
     * @param authToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getCollectionIdsCall(String authToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gmaf/get-collection-ids/{auth-token}"
                .replace("{" + "auth-token" + "}", localVarApiClient.escapeString(authToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionIdsValidateBeforeCall(String authToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getCollectionIds(Async)");
        }

        return getCollectionIdsCall(authToken, _callback);

    }

    /**
     *
     *
     * @param authToken  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public List<String> getCollectionIds(String authToken) throws ApiException {
        ApiResponse<List<String>> localVarResp = getCollectionIdsWithHttpInfo(authToken);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param authToken  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<List<String>> getCollectionIdsWithHttpInfo(String authToken) throws ApiException {
        okhttp3.Call localVarCall = getCollectionIdsValidateBeforeCall(authToken, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param authToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getCollectionIdsAsync(String authToken, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionIdsValidateBeforeCall(authToken, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollectionMetadata
     * @param authToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getCollectionMetadataCall(String authToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gmaf/getMetadata/{auth-token}"
                .replace("{" + "auth-token" + "}", localVarApiClient.escapeString(authToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionMetadataValidateBeforeCall(String authToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getCollectionMetadata(Async)");
        }

        return getCollectionMetadataCall(authToken, _callback);

    }

    /**
     *
     *
     * @param authToken  (required)
     * @return List&lt;GeneralMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public List<GeneralMetadata> getCollectionMetadata(String authToken) throws ApiException {
        ApiResponse<List<GeneralMetadata>> localVarResp = getCollectionMetadataWithHttpInfo(authToken);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param authToken  (required)
     * @return ApiResponse&lt;List&lt;GeneralMetadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<List<GeneralMetadata>> getCollectionMetadataWithHttpInfo(String authToken) throws ApiException {
        okhttp3.Call localVarCall = getCollectionMetadataValidateBeforeCall(authToken, null);
        Type localVarReturnType = new TypeToken<List<GeneralMetadata>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param authToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getCollectionMetadataAsync(String authToken, final ApiCallback<List<GeneralMetadata>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionMetadataValidateBeforeCall(authToken, _callback);
        Type localVarReturnType = new TypeToken<List<GeneralMetadata>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExternalGrammar
     * @param path  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getExternalGrammarCall(String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application.wadl/{path}"
                .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExternalGrammarValidateBeforeCall(String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getExternalGrammar(Async)");
        }

        return getExternalGrammarCall(path, _callback);

    }

    /**
     *
     *
     * @param path  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public void getExternalGrammar(String path) throws ApiException {
        getExternalGrammarWithHttpInfo(path);
    }

    /**
     *
     *
     * @param path  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<Void> getExternalGrammarWithHttpInfo(String path) throws ApiException {
        okhttp3.Call localVarCall = getExternalGrammarValidateBeforeCall(path, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     *
     * @param path  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getExternalGrammarAsync(String path, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExternalGrammarValidateBeforeCall(path, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImage
     * @param authToken  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getImageCall(String authToken, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gmaf/preview/{auth-token}/{id}"
                .replace("{" + "auth-token" + "}", localVarApiClient.escapeString(authToken.toString()))
                .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "image/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageValidateBeforeCall(String authToken, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getImage(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getImage(Async)");
        }

        return getImageCall(authToken, id, _callback);
    }

    /**
     *
     *
     * @param authToken  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public byte[] getImage(String authToken, String id) throws ApiException {
        ApiResponse<byte[]> response = getImageWithHttpInfo(authToken, id);
        return response.getData();
    }

    /**
     *
     *
     * @param authToken  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<byte[]> getImageWithHttpInfo(String authToken, String id) throws ApiException {
        okhttp3.Call localVarCall = getImageValidateBeforeCall(authToken, id, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param authToken  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getImageAsync(String authToken, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageValidateBeforeCall(authToken, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMMFGForId
     * @param authToken  (required)
     * @param mmfgId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getMMFGForIdCall(String authToken, String mmfgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gmaf/getmmfg/{auth-token}/{mmfg-id}"
                .replace("{" + "auth-token" + "}", localVarApiClient.escapeString(authToken.toString()))
                .replace("{" + "mmfg-id" + "}", localVarApiClient.escapeString(mmfgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMMFGForIdValidateBeforeCall(String authToken, String mmfgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getMMFGForId(Async)");
        }

        // verify the required parameter 'mmfgId' is set
        if (mmfgId == null) {
            throw new ApiException("Missing the required parameter 'mmfgId' when calling getMMFGForId(Async)");
        }

        return getMMFGForIdCall(authToken, mmfgId, _callback);

    }

    /**
     *
     *
     * @param authToken  (required)
     * @param mmfgId  (required)
     * @return MMFG
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public MMFG getMMFGForId(String authToken, String mmfgId) throws ApiException {
        ApiResponse<MMFG> localVarResp = getMMFGForIdWithHttpInfo(authToken, mmfgId);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param authToken  (required)
     * @param mmfgId  (required)
     * @return ApiResponse&lt;MMFG&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<MMFG> getMMFGForIdWithHttpInfo(String authToken, String mmfgId) throws ApiException {
        okhttp3.Call localVarCall = getMMFGForIdValidateBeforeCall(authToken, mmfgId, null);
        Type localVarReturnType = new TypeToken<MMFG>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param authToken  (required)
     * @param mmfgId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getMMFGForIdAsync(String authToken, String mmfgId, final ApiCallback<MMFG> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMMFGForIdValidateBeforeCall(authToken, mmfgId, _callback);
        Type localVarReturnType = new TypeToken<MMFG>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrGenerateGraphCode
     * @param authToken  (required)
     * @param mmfgId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getOrGenerateGraphCodeCall(String authToken, String mmfgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gmaf/getgc/{auth-token}/{mmfg_id}"
                .replace("{" + "auth-token" + "}", localVarApiClient.escapeString(authToken.toString()))
                .replace("{" + "mmfg_id" + "}", localVarApiClient.escapeString(mmfgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrGenerateGraphCodeValidateBeforeCall(String authToken, String mmfgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getOrGenerateGraphCode(Async)");
        }

        // verify the required parameter 'mmfgId' is set
        if (mmfgId == null) {
            throw new ApiException("Missing the required parameter 'mmfgId' when calling getOrGenerateGraphCode(Async)");
        }

        return getOrGenerateGraphCodeCall(authToken, mmfgId, _callback);

    }

    /**
     *
     *
     * @param authToken  (required)
     * @param mmfgId  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public String getOrGenerateGraphCode(String authToken, String mmfgId) throws ApiException {
        ApiResponse<String> localVarResp = getOrGenerateGraphCodeWithHttpInfo(authToken, mmfgId);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param authToken  (required)
     * @param mmfgId  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<String> getOrGenerateGraphCodeWithHttpInfo(String authToken, String mmfgId) throws ApiException {
        okhttp3.Call localVarCall = getOrGenerateGraphCodeValidateBeforeCall(authToken, mmfgId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param authToken  (required)
     * @param mmfgId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getOrGenerateGraphCodeAsync(String authToken, String mmfgId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrGenerateGraphCodeValidateBeforeCall(authToken, mmfgId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPreviewURL
     * @param authToken  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getPreviewURLCall(String authToken, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gmaf/preview/{auth-token}/{id}"
                .replace("{" + "auth-token" + "}", localVarApiClient.escapeString(authToken.toString()))
                .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPreviewURLValidateBeforeCall(String authToken, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getPreviewURL(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPreviewURL(Async)");
        }

        return getPreviewURLCall(authToken, id, _callback);

    }

    /**
     *
     *
     * @param authToken  (required)
     * @param id  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public String getPreviewURL(String authToken, String id) throws ApiException {
        ApiResponse<String> localVarResp = getPreviewURLWithHttpInfo(authToken, id);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param authToken  (required)
     * @param id  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<String> getPreviewURLWithHttpInfo(String authToken, String id) throws ApiException {
        okhttp3.Call localVarCall = getPreviewURLValidateBeforeCall(authToken, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param authToken  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getPreviewURLAsync(String authToken, String id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPreviewURLValidateBeforeCall(authToken, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecommendedAssets
     * @param authToken  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getRecommendedAssetsCall(String authToken, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gmaf/getRec/{auth-token}/{id}"
                .replace("{" + "auth-token" + "}", localVarApiClient.escapeString(authToken.toString()))
                .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecommendedAssetsValidateBeforeCall(String authToken, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getRecommendedAssets(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecommendedAssets(Async)");
        }

        return getRecommendedAssetsCall(authToken, id, _callback);

    }

    /**
     *
     *
     * @param authToken  (required)
     * @param id  (required)
     * @return List&lt;MMFG&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public List<MMFG> getRecommendedAssets(String authToken, String id) throws ApiException {
        ApiResponse<List<MMFG>> localVarResp = getRecommendedAssetsWithHttpInfo(authToken, id);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param authToken  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;MMFG&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<List<MMFG>> getRecommendedAssetsWithHttpInfo(String authToken, String id) throws ApiException {
        okhttp3.Call localVarCall = getRecommendedAssetsValidateBeforeCall(authToken, id, null);
        Type localVarReturnType = new TypeToken<List<MMFG>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param authToken  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getRecommendedAssetsAsync(String authToken, String id, final ApiCallback<List<MMFG>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecommendedAssetsValidateBeforeCall(authToken, id, _callback);
        Type localVarReturnType = new TypeToken<List<MMFG>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSession
     * @param session  (required)
     * @param apiKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getSessionCall(String session, String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gmaf/{session}/{api-key}"
                .replace("{" + "session" + "}", localVarApiClient.escapeString(session.toString()))
                .replace("{" + "api-key" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionValidateBeforeCall(String session, String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'session' is set
        if (session == null) {
            throw new ApiException("Missing the required parameter 'session' when calling getSession(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getSession(Async)");
        }

        return getSessionCall(session, apiKey, _callback);

    }

    /**
     *
     *
     * @param session  (required)
     * @param apiKey  (required)
     * @return GMAF
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public GMAF getSession(String session, String apiKey) throws ApiException {
        ApiResponse<GMAF> localVarResp = getSessionWithHttpInfo(session, apiKey);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param session  (required)
     * @param apiKey  (required)
     * @return ApiResponse&lt;GMAF&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<GMAF> getSessionWithHttpInfo(String session, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = getSessionValidateBeforeCall(session, apiKey, null);
        Type localVarReturnType = new TypeToken<GMAF>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param session  (required)
     * @param apiKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getSessionAsync(String session, String apiKey, final ApiCallback<GMAF> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionValidateBeforeCall(session, apiKey, _callback);
        Type localVarReturnType = new TypeToken<GMAF>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSimilarAssetIDsByGraphCode
     * @param authToken  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getSimilarAssetIDsByGraphCodeCall(String authToken, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gmaf/getsimilarassetsbygraphcode/{auth-token}"
                .replace("{" + "auth-token" + "}", localVarApiClient.escapeString(authToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSimilarAssetIDsByGraphCodeValidateBeforeCall(String authToken, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getSimilarAssetIDsByGraphCode(Async)");
        }

        return getSimilarAssetIDsByGraphCodeCall(authToken, body, _callback);

    }

    /**
     *
     *
     * @param authToken  (required)
     * @param body  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public List<String> getSimilarAssetIDsByGraphCode(String authToken, String body) throws ApiException {
        ApiResponse<List<String>> localVarResp = getSimilarAssetIDsByGraphCodeWithHttpInfo(authToken, body);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param authToken  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<List<String>> getSimilarAssetIDsByGraphCodeWithHttpInfo(String authToken, String body) throws ApiException {
        okhttp3.Call localVarCall = getSimilarAssetIDsByGraphCodeValidateBeforeCall(authToken, body, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param authToken  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getSimilarAssetIDsByGraphCodeAsync(String authToken, String body, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSimilarAssetIDsByGraphCodeValidateBeforeCall(authToken, body, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSimilarAssets
     * @param authToken  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getSimilarAssetsCall(String authToken, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gmaf/getSim/{auth-token}/{id}"
                .replace("{" + "auth-token" + "}", localVarApiClient.escapeString(authToken.toString()))
                .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSimilarAssetsValidateBeforeCall(String authToken, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getSimilarAssets(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSimilarAssets(Async)");
        }

        return getSimilarAssetsCall(authToken, id, _callback);

    }

    /**
     *
     *
     * @param authToken  (required)
     * @param id  (required)
     * @return List&lt;MMFG&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public List<MMFG> getSimilarAssets(String authToken, String id) throws ApiException {
        ApiResponse<List<MMFG>> localVarResp = getSimilarAssetsWithHttpInfo(authToken, id);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param authToken  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;MMFG&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<List<MMFG>> getSimilarAssetsWithHttpInfo(String authToken, String id) throws ApiException {
        okhttp3.Call localVarCall = getSimilarAssetsValidateBeforeCall(authToken, id, null);
        Type localVarReturnType = new TypeToken<List<MMFG>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param authToken  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getSimilarAssetsAsync(String authToken, String id, final ApiCallback<List<MMFG>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSimilarAssetsValidateBeforeCall(authToken, id, _callback);
        Type localVarReturnType = new TypeToken<List<MMFG>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWadl
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getWadlCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application.wadl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.sun.wadl+xml",
                "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWadlValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getWadlCall(_callback);

    }

    /**
     *
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public void getWadl() throws ApiException {
        getWadlWithHttpInfo();
    }

    /**
     *
     *
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<Void> getWadlWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getWadlValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call getWadlAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWadlValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryByKeyword
     * @param authToken  (required)
     * @param query  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call queryByKeywordCall(String authToken, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gmaf/query/{auth-token}/{query}"
                .replace("{" + "auth-token" + "}", localVarApiClient.escapeString(authToken.toString()))
                .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryByKeywordValidateBeforeCall(String authToken, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling queryByKeyword(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling queryByKeyword(Async)");
        }

        return queryByKeywordCall(authToken, query, _callback);

    }

    /**
     *
     *
     * @param authToken  (required)
     * @param query  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public List<String> queryByKeyword(String authToken, String query) throws ApiException {
        ApiResponse<List<String>> localVarResp = queryByKeywordWithHttpInfo(authToken, query);
        return localVarResp.getData();
    }

    /**
     *
     *
     * @param authToken  (required)
     * @param query  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<List<String>> queryByKeywordWithHttpInfo(String authToken, String query) throws ApiException {
        okhttp3.Call localVarCall = queryByKeywordValidateBeforeCall(authToken, query, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *
     * @param authToken  (required)
     * @param query  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call queryByKeywordAsync(String authToken, String query, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryByKeywordValidateBeforeCall(authToken, query, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setProcessingPlugins
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call setProcessingPluginsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else if (localVarApiClient.getBasePath() != null) {
            basePath = localVarApiClient.getBasePath();
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setProcessingPluginsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return setProcessingPluginsCall(_callback);

    }

    /**
     *
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public void setProcessingPlugins() throws ApiException {
        setProcessingPluginsWithHttpInfo();
    }

    /**
     *
     *
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public ApiResponse<Void> setProcessingPluginsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = setProcessingPluginsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
    <table summary="Response Details" border="1">
    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
    <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
    </table>
     */
    public okhttp3.Call setProcessingPluginsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setProcessingPluginsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
