/*
 * GMAF
 * GMAF REST
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tei.mmir.gmaf.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.tei.mmir.gmaf.model.TechnicalAttributeDominantColorsInnerColorSpace;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import de.tei.mmir.gmaf.invoker.JSON;

/**
 * TechnicalAttributeDominantColorsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-16T22:33:47.860262400+01:00[Europe/Berlin]")
public class TechnicalAttributeDominantColorsInner {
  public static final String SERIALIZED_NAME_RED = "red";
  @SerializedName(SERIALIZED_NAME_RED)
  private Integer red;

  public static final String SERIALIZED_NAME_GREEN = "green";
  @SerializedName(SERIALIZED_NAME_GREEN)
  private Integer green;

  public static final String SERIALIZED_NAME_BLUE = "blue";
  @SerializedName(SERIALIZED_NAME_BLUE)
  private Integer blue;

  public static final String SERIALIZED_NAME_ALPHA = "alpha";
  @SerializedName(SERIALIZED_NAME_ALPHA)
  private Integer alpha;

  public static final String SERIALIZED_NAME_COLOR_SPACE = "colorSpace";
  @SerializedName(SERIALIZED_NAME_COLOR_SPACE)
  private TechnicalAttributeDominantColorsInnerColorSpace colorSpace;

  public static final String SERIALIZED_NAME_RGB = "rgb";
  @SerializedName(SERIALIZED_NAME_RGB)
  private Integer rgb;

  public static final String SERIALIZED_NAME_TRANSPARENCY = "transparency";
  @SerializedName(SERIALIZED_NAME_TRANSPARENCY)
  private Integer transparency;

  public TechnicalAttributeDominantColorsInner() {
  }

  public TechnicalAttributeDominantColorsInner red(Integer red) {
    
    this.red = red;
    return this;
  }

   /**
   * Get red
   * @return red
  **/
  @javax.annotation.Nullable
  public Integer getRed() {
    return red;
  }


  public void setRed(Integer red) {
    this.red = red;
  }


  public TechnicalAttributeDominantColorsInner green(Integer green) {
    
    this.green = green;
    return this;
  }

   /**
   * Get green
   * @return green
  **/
  @javax.annotation.Nullable
  public Integer getGreen() {
    return green;
  }


  public void setGreen(Integer green) {
    this.green = green;
  }


  public TechnicalAttributeDominantColorsInner blue(Integer blue) {
    
    this.blue = blue;
    return this;
  }

   /**
   * Get blue
   * @return blue
  **/
  @javax.annotation.Nullable
  public Integer getBlue() {
    return blue;
  }


  public void setBlue(Integer blue) {
    this.blue = blue;
  }


  public TechnicalAttributeDominantColorsInner alpha(Integer alpha) {
    
    this.alpha = alpha;
    return this;
  }

   /**
   * Get alpha
   * @return alpha
  **/
  @javax.annotation.Nullable
  public Integer getAlpha() {
    return alpha;
  }


  public void setAlpha(Integer alpha) {
    this.alpha = alpha;
  }


  public TechnicalAttributeDominantColorsInner colorSpace(TechnicalAttributeDominantColorsInnerColorSpace colorSpace) {
    
    this.colorSpace = colorSpace;
    return this;
  }

   /**
   * Get colorSpace
   * @return colorSpace
  **/
  @javax.annotation.Nullable
  public TechnicalAttributeDominantColorsInnerColorSpace getColorSpace() {
    return colorSpace;
  }


  public void setColorSpace(TechnicalAttributeDominantColorsInnerColorSpace colorSpace) {
    this.colorSpace = colorSpace;
  }


  public TechnicalAttributeDominantColorsInner rgb(Integer rgb) {
    
    this.rgb = rgb;
    return this;
  }

   /**
   * Get rgb
   * @return rgb
  **/
  @javax.annotation.Nullable
  public Integer getRgb() {
    return rgb;
  }


  public void setRgb(Integer rgb) {
    this.rgb = rgb;
  }


  public TechnicalAttributeDominantColorsInner transparency(Integer transparency) {
    
    this.transparency = transparency;
    return this;
  }

   /**
   * Get transparency
   * @return transparency
  **/
  @javax.annotation.Nullable
  public Integer getTransparency() {
    return transparency;
  }


  public void setTransparency(Integer transparency) {
    this.transparency = transparency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TechnicalAttributeDominantColorsInner technicalAttributeDominantColorsInner = (TechnicalAttributeDominantColorsInner) o;
    return Objects.equals(this.red, technicalAttributeDominantColorsInner.red) &&
        Objects.equals(this.green, technicalAttributeDominantColorsInner.green) &&
        Objects.equals(this.blue, technicalAttributeDominantColorsInner.blue) &&
        Objects.equals(this.alpha, technicalAttributeDominantColorsInner.alpha) &&
        Objects.equals(this.colorSpace, technicalAttributeDominantColorsInner.colorSpace) &&
        Objects.equals(this.rgb, technicalAttributeDominantColorsInner.rgb) &&
        Objects.equals(this.transparency, technicalAttributeDominantColorsInner.transparency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(red, green, blue, alpha, colorSpace, rgb, transparency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TechnicalAttributeDominantColorsInner {\n");
    sb.append("    red: ").append(toIndentedString(red)).append("\n");
    sb.append("    green: ").append(toIndentedString(green)).append("\n");
    sb.append("    blue: ").append(toIndentedString(blue)).append("\n");
    sb.append("    alpha: ").append(toIndentedString(alpha)).append("\n");
    sb.append("    colorSpace: ").append(toIndentedString(colorSpace)).append("\n");
    sb.append("    rgb: ").append(toIndentedString(rgb)).append("\n");
    sb.append("    transparency: ").append(toIndentedString(transparency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("red");
    openapiFields.add("green");
    openapiFields.add("blue");
    openapiFields.add("alpha");
    openapiFields.add("colorSpace");
    openapiFields.add("rgb");
    openapiFields.add("transparency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TechnicalAttributeDominantColorsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TechnicalAttributeDominantColorsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TechnicalAttributeDominantColorsInner is not found in the empty JSON string", TechnicalAttributeDominantColorsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TechnicalAttributeDominantColorsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TechnicalAttributeDominantColorsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `colorSpace`
      if (jsonObj.get("colorSpace") != null && !jsonObj.get("colorSpace").isJsonNull()) {
        TechnicalAttributeDominantColorsInnerColorSpace.validateJsonObject(jsonObj.getAsJsonObject("colorSpace"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TechnicalAttributeDominantColorsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TechnicalAttributeDominantColorsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TechnicalAttributeDominantColorsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TechnicalAttributeDominantColorsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TechnicalAttributeDominantColorsInner>() {
           @Override
           public void write(JsonWriter out, TechnicalAttributeDominantColorsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TechnicalAttributeDominantColorsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TechnicalAttributeDominantColorsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TechnicalAttributeDominantColorsInner
  * @throws IOException if the JSON string is invalid with respect to TechnicalAttributeDominantColorsInner
  */
  public static TechnicalAttributeDominantColorsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TechnicalAttributeDominantColorsInner.class);
  }

 /**
  * Convert an instance of TechnicalAttributeDominantColorsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

