/*
 * GMAF
 * GMAF REST
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tei.mmir.gmaf.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.tei.mmir.gmaf.model.GeneralMetadata;
import de.tei.mmir.gmaf.model.Location;
import de.tei.mmir.gmaf.model.Node;
import de.tei.mmir.gmaf.model.Security;
import de.tei.mmir.gmaf.model.Timerange;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import de.tei.mmir.gmaf.invoker.JSON;

/**
 * MMFG
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-16T22:33:47.860262400+01:00[Europe/Berlin]")
public class MMFG {
  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private List<Node> nodes;

  public static final String SERIALIZED_NAME_GENERAL_METADATA = "generalMetadata";
  @SerializedName(SERIALIZED_NAME_GENERAL_METADATA)
  private GeneralMetadata generalMetadata;

  public static final String SERIALIZED_NAME_SECURITY = "security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private Security security;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<Location> locations;

  public static final String SERIALIZED_NAME_CURRENT_NODE = "currentNode";
  @SerializedName(SERIALIZED_NAME_CURRENT_NODE)
  private Node currentNode;

  public static final String SERIALIZED_NAME_SIMILARITY = "similarity";
  @SerializedName(SERIALIZED_NAME_SIMILARITY)
  private List<Float> similarity;

  public static final String SERIALIZED_NAME_TEMP_SIMILARITY = "tempSimilarity";
  @SerializedName(SERIALIZED_NAME_TEMP_SIMILARITY)
  private List<Float> tempSimilarity;

  public static final String SERIALIZED_NAME_ALL_NODES = "allNodes";
  @SerializedName(SERIALIZED_NAME_ALL_NODES)
  private List<Node> allNodes;

  public static final String SERIALIZED_NAME_COLLECTION_ELEMENTS = "collectionElements";
  @SerializedName(SERIALIZED_NAME_COLLECTION_ELEMENTS)
  private List<MMFG> collectionElements;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_BEGIN = "begin";
  @SerializedName(SERIALIZED_NAME_BEGIN)
  private Timerange begin;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private Timerange end;

  public MMFG() {
  }

  public MMFG nodes(List<Node> nodes) {
    
    this.nodes = nodes;
    return this;
  }

  public MMFG addNodesItem(Node nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

   /**
   * Get nodes
   * @return nodes
  **/
  @javax.annotation.Nullable
  public List<Node> getNodes() {
    return nodes;
  }


  public void setNodes(List<Node> nodes) {
    this.nodes = nodes;
  }


  public MMFG generalMetadata(GeneralMetadata generalMetadata) {
    
    this.generalMetadata = generalMetadata;
    return this;
  }

   /**
   * Get generalMetadata
   * @return generalMetadata
  **/
  @javax.annotation.Nullable
  public GeneralMetadata getGeneralMetadata() {
    return generalMetadata;
  }


  public void setGeneralMetadata(GeneralMetadata generalMetadata) {
    this.generalMetadata = generalMetadata;
  }


  public MMFG security(Security security) {
    
    this.security = security;
    return this;
  }

   /**
   * Get security
   * @return security
  **/
  @javax.annotation.Nullable
  public Security getSecurity() {
    return security;
  }


  public void setSecurity(Security security) {
    this.security = security;
  }


  public MMFG locations(List<Location> locations) {
    
    this.locations = locations;
    return this;
  }

  public MMFG addLocationsItem(Location locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @javax.annotation.Nullable
  public List<Location> getLocations() {
    return locations;
  }


  public void setLocations(List<Location> locations) {
    this.locations = locations;
  }


  public MMFG currentNode(Node currentNode) {
    
    this.currentNode = currentNode;
    return this;
  }

   /**
   * Get currentNode
   * @return currentNode
  **/
  @javax.annotation.Nullable
  public Node getCurrentNode() {
    return currentNode;
  }


  public void setCurrentNode(Node currentNode) {
    this.currentNode = currentNode;
  }


  public MMFG similarity(List<Float> similarity) {
    
    this.similarity = similarity;
    return this;
  }

  public MMFG addSimilarityItem(Float similarityItem) {
    if (this.similarity == null) {
      this.similarity = new ArrayList<>();
    }
    this.similarity.add(similarityItem);
    return this;
  }

   /**
   * Get similarity
   * @return similarity
  **/
  @javax.annotation.Nullable
  public List<Float> getSimilarity() {
    return similarity;
  }


  public void setSimilarity(List<Float> similarity) {
    this.similarity = similarity;
  }


  public MMFG tempSimilarity(List<Float> tempSimilarity) {
    
    this.tempSimilarity = tempSimilarity;
    return this;
  }

  public MMFG addTempSimilarityItem(Float tempSimilarityItem) {
    if (this.tempSimilarity == null) {
      this.tempSimilarity = new ArrayList<>();
    }
    this.tempSimilarity.add(tempSimilarityItem);
    return this;
  }

   /**
   * Get tempSimilarity
   * @return tempSimilarity
  **/
  @javax.annotation.Nullable
  public List<Float> getTempSimilarity() {
    return tempSimilarity;
  }


  public void setTempSimilarity(List<Float> tempSimilarity) {
    this.tempSimilarity = tempSimilarity;
  }


  public MMFG allNodes(List<Node> allNodes) {
    
    this.allNodes = allNodes;
    return this;
  }

  public MMFG addAllNodesItem(Node allNodesItem) {
    if (this.allNodes == null) {
      this.allNodes = new ArrayList<>();
    }
    this.allNodes.add(allNodesItem);
    return this;
  }

   /**
   * Get allNodes
   * @return allNodes
  **/
  @javax.annotation.Nullable
  public List<Node> getAllNodes() {
    return allNodes;
  }


  public void setAllNodes(List<Node> allNodes) {
    this.allNodes = allNodes;
  }


  public MMFG collectionElements(List<MMFG> collectionElements) {
    
    this.collectionElements = collectionElements;
    return this;
  }

  public MMFG addCollectionElementsItem(MMFG collectionElementsItem) {
    if (this.collectionElements == null) {
      this.collectionElements = new ArrayList<>();
    }
    this.collectionElements.add(collectionElementsItem);
    return this;
  }

   /**
   * Get collectionElements
   * @return collectionElements
  **/
  @javax.annotation.Nullable
  public List<MMFG> getCollectionElements() {
    return collectionElements;
  }


  public void setCollectionElements(List<MMFG> collectionElements) {
    this.collectionElements = collectionElements;
  }


  public MMFG id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public MMFG begin(Timerange begin) {
    
    this.begin = begin;
    return this;
  }

   /**
   * Get begin
   * @return begin
  **/
  @javax.annotation.Nullable
  public Timerange getBegin() {
    return begin;
  }


  public void setBegin(Timerange begin) {
    this.begin = begin;
  }


  public MMFG end(Timerange end) {
    
    this.end = end;
    return this;
  }

   /**
   * Get end
   * @return end
  **/
  @javax.annotation.Nullable
  public Timerange getEnd() {
    return end;
  }


  public void setEnd(Timerange end) {
    this.end = end;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MMFG MMFG = (MMFG) o;
    return Objects.equals(this.nodes, MMFG.nodes) &&
        Objects.equals(this.generalMetadata, MMFG.generalMetadata) &&
        Objects.equals(this.security, MMFG.security) &&
        Objects.equals(this.locations, MMFG.locations) &&
        Objects.equals(this.currentNode, MMFG.currentNode) &&
        Objects.equals(this.similarity, MMFG.similarity) &&
        Objects.equals(this.tempSimilarity, MMFG.tempSimilarity) &&
        Objects.equals(this.allNodes, MMFG.allNodes) &&
        Objects.equals(this.collectionElements, MMFG.collectionElements) &&
        Objects.equals(this.id, MMFG.id) &&
        Objects.equals(this.begin, MMFG.begin) &&
        Objects.equals(this.end, MMFG.end);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodes, generalMetadata, security, locations, currentNode, similarity, tempSimilarity, allNodes, collectionElements, id, begin, end);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MMFG {\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    generalMetadata: ").append(toIndentedString(generalMetadata)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    currentNode: ").append(toIndentedString(currentNode)).append("\n");
    sb.append("    similarity: ").append(toIndentedString(similarity)).append("\n");
    sb.append("    tempSimilarity: ").append(toIndentedString(tempSimilarity)).append("\n");
    sb.append("    allNodes: ").append(toIndentedString(allNodes)).append("\n");
    sb.append("    collectionElements: ").append(toIndentedString(collectionElements)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    begin: ").append(toIndentedString(begin)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nodes");
    openapiFields.add("generalMetadata");
    openapiFields.add("security");
    openapiFields.add("locations");
    openapiFields.add("currentNode");
    openapiFields.add("similarity");
    openapiFields.add("tempSimilarity");
    openapiFields.add("allNodes");
    openapiFields.add("collectionElements");
    openapiFields.add("id");
    openapiFields.add("begin");
    openapiFields.add("end");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MMFG
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MMFG.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MMFG is not found in the empty JSON string", MMFG.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MMFG.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MMFG` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) {
        JsonArray jsonArraynodes = jsonObj.getAsJsonArray("nodes");
        if (jsonArraynodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
          }

          // validate the optional field `nodes` (array)
          for (int i = 0; i < jsonArraynodes.size(); i++) {
            Node.validateJsonObject(jsonArraynodes.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `generalMetadata`
      if (jsonObj.get("generalMetadata") != null && !jsonObj.get("generalMetadata").isJsonNull()) {
        GeneralMetadata.validateJsonObject(jsonObj.getAsJsonObject("generalMetadata"));
      }
      // validate the optional field `security`
      if (jsonObj.get("security") != null && !jsonObj.get("security").isJsonNull()) {
        Security.validateJsonObject(jsonObj.getAsJsonObject("security"));
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            Location.validateJsonObject(jsonArraylocations.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `currentNode`
      if (jsonObj.get("currentNode") != null && !jsonObj.get("currentNode").isJsonNull()) {
        Node.validateJsonObject(jsonObj.getAsJsonObject("currentNode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("similarity") != null && !jsonObj.get("similarity").isJsonNull() && !jsonObj.get("similarity").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `similarity` to be an array in the JSON string but got `%s`", jsonObj.get("similarity").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tempSimilarity") != null && !jsonObj.get("tempSimilarity").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tempSimilarity` to be an array in the JSON string but got `%s`", jsonObj.get("tempSimilarity").toString()));
      }
      if (jsonObj.get("allNodes") != null && !jsonObj.get("allNodes").isJsonNull()) {
        JsonArray jsonArrayallNodes = jsonObj.getAsJsonArray("allNodes");
        if (jsonArrayallNodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allNodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allNodes` to be an array in the JSON string but got `%s`", jsonObj.get("allNodes").toString()));
          }

          // validate the optional field `allNodes` (array)
          for (int i = 0; i < jsonArrayallNodes.size(); i++) {
            Node.validateJsonObject(jsonArrayallNodes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("collectionElements") != null && !jsonObj.get("collectionElements").isJsonNull()) {
        JsonArray jsonArraycollectionElements = jsonObj.getAsJsonArray("collectionElements");
        if (jsonArraycollectionElements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("collectionElements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `collectionElements` to be an array in the JSON string but got `%s`", jsonObj.get("collectionElements").toString()));
          }

          // validate the optional field `collectionElements` (array)
          for (int i = 0; i < jsonArraycollectionElements.size(); i++) {
            MMFG.validateJsonObject(jsonArraycollectionElements.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `begin`
      if (jsonObj.get("begin") != null && !jsonObj.get("begin").isJsonNull()) {
        Timerange.validateJsonObject(jsonObj.getAsJsonObject("begin"));
      }
      // validate the optional field `end`
      if (jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) {
        Timerange.validateJsonObject(jsonObj.getAsJsonObject("end"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MMFG.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MMFG' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MMFG> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MMFG.class));

       return (TypeAdapter<T>) new TypeAdapter<MMFG>() {
           @Override
           public void write(JsonWriter out, MMFG value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MMFG read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MMFG given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MMFG
  * @throws IOException if the JSON string is invalid with respect to MMFG
  */
  public static MMFG fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MMFG.class);
  }

 /**
  * Convert an instance of MMFG to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

